openapi: 3.0.1
info:
  title: WASAPhoto APIs
  version: 1.0.1
  description: >
    **"Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto!"**
    
    WASAPhoto is web application based on RESTfull architecture to allows upload your photos directly from your PC, and they will be visible to everyone following you.
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  
  contact:
    name: Andrea Pizzi
    url: https://github.com/pizzi-andrea/WASAPhoto
    email: pizzi.1995517@studenti.uniroma1.it
  
servers:
  - url: https//localhost:3030

paths:
  /users/:
    summary: users
    description: >
      this resource rappresent collection of users
    
    post:
      security:
        - BearerAuth: []
        
      summary: add new user
      description: >
        create new user logged
      
      tags:
        - user
      requestBody:
        description: >
          user to register
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      operationId: addNewUser
      
      responses:
        "201":
          description: >
            successfull create new user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/ServerError"
    get:
      security:
        - BearerAuth: []
        
      tags:
        - user
      summary: list registred users
      description: >
        this method return the list of users currently registered
      parameters: 
        
        - $ref: "#/components/parameters/QueryLimit"
        - $ref: "#/components/parameters/UsernameFilter"
          
          
      operationId: listUsers
      
      responses:
        "200":
          description: >
            get the list contaning all users current signed
          content:
            application/json:
              schema:
                description: >
                  list of users  
                type: array
                items: 
                  $ref: "#/components/schemas/User"
                minItems: 1
                maxItems: 300
             
                example:
                  - username: "MarioRoss"
                    uid: 10
                  - username: "alux"
                    uid: 840
        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "204":
          description: >
            empty body, found nothing
        "500":
          $ref: "#/components/responses/ServerError"
          
  /users/{uid}/:
    summary:  users
    description: >
       Resource rappresent a single user
       
    parameters:
        - $ref: "#/components/parameters/Uid"
    
    get:
      tags:
        - user
      summary: get specific user profile
      description: >
        give user id and put user profile. User profile is object contain 
        all information on user, in particular:
          - information about user
          - stream photos updated
          - number of photo have been updated
          - number of followers
          - number of following
      
      security:
        - BearerAuth: []
        
      operationId: getUserProfile
      
      responses:
        "200":
          description: >
            get user profile corresponding to *uid*
          content:
            application/json:
              schema:
                {$ref: "#/components/schemas/Profile"}
        "404":
          description: >
            user not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"

    put:
      tags:
        - user
      summary: assign or update username
      description: >
        assign username or update old username with new username.
        The username to set is in the body request
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        description: >
          new username
        required: true
      
      operationId: setMyUserName
      
      security:
        - BearerAuth: []
      
      responses:
        "204":
          description: >
            success, assigned new username
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "404":
          description: >
            user not found
        "500":
          $ref: "#/components/responses/ServerError"

  /users/{uid}/followers/:
    summary: user followers
    description: >
      this resurce rappresent the followers of specific user
    parameters:
      - $ref: "#/components/parameters/Uid"
    get:
      security:
        - BearerAuth: []
      tags:
        - user
        - follower
      summary: get all followers
      description: >
        give a UID return a list contanings all followers user
      parameters:
        - $ref: "#/components/parameters/QueryLimit"
        - $ref: "#/components/parameters/UsernameFilter"
          
      operationId: listFollowers
      
      responses:
        "200":
          description: >
            success, return list of followers
          content:
            application/json:
              schema:
                description: >
                  list of followers
                type: array
                items: 
                  $ref: "#/components/schemas/User"
                minItems: 1
                maxItems: 1000
        "404":
          description: >
            not found, user not found
        
        "204":
          description: >
            empty body, found nothing

        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"

  /users/{uid}/followers/{followerId}:
    summary: a follower
    description: >
      this resource rappresent follower
    parameters:
      - $ref: "#/components/parameters/Uid"
      - $ref: "#/components/parameters/FollowerId"
    delete:
      tags:
        - user
        - follower
      summary: unfollow user
      description: >
        gived uid and *followedId* then remove follower *followerId* from user followers
      security:
        - BearerAuth: []
        
      operationId: unfollowUser
      
      responses:
        "204":
          description: >
            success , unfollow the user
        "404":
          description: >
            just no follow user or user Id not exist
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
    
    put:
      tags:
        - user
        - follower
      summary:  follow user
      description: >
        give user  and added to  follower of user
      
      
      requestBody:
        description: >
          information on followers
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      
      security:
        - BearerAuth: []
      
      operationId: followUser
      
      responses:
        "201": 
          description: >
            added new follower
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "204":
          description: >
            just follow the user
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
  
  /users/{uid}/following/:
    summary: users following by specific user
    description: > 
      this resource rappresent all users followed by user
    
    parameters:
      - $ref: "#/components/parameters/Uid"
            
    get:
      tags:
        - user
        - following
      summary: get following users
      description: >
        given the *id* of the user who wants to see the users he follows he will get the list of followed users
      
      parameters:
        - $ref: "#/components/parameters/QueryLimit"
        - $ref: "#/components/parameters/UsernameFilter"
      security:
      - BearerAuth: []
  
      operationId: getFollowed
      
      responses:
        "200":
          description: >
            success, get users followed
          content:
            application/json:
              schema:
                type: array
                description: >
                  list of followed
                items:
                  $ref: "#/components/schemas/User"
                minItems: 1
                maxItems: 1000
        "404":
          description: >
            not found, user not found
        "204":
          description: >
            empty body, found nothing
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
  
  /users/{uid}/following/{followingId}:
    summary: user following this user
    description: >
      this resource rappresent a followed user
    
    parameters:
      - $ref: "#/components/parameters/Uid"
      - $ref: "#/components/parameters/FollowingId"
    
    get:
      tags:
        - user
        - following
      summary: get followed user
      description: >
        given the *id* of the user and *id* following user and get it
      
      parameters:
        - $ref: "#/components/parameters/QueryLimit"
        - $ref: "#/components/parameters/UsernameFilter"
      security:
      - BearerAuth: []
  
      operationId: getFollowing
      
      responses:
        "200":
          description: >
            success, get user following
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
                
        "404":
          description: >
            not found, user not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
    
    

        
    
    
  /users/{uid}/myStream:
    summary: user stream photos
    description: >
      this resource rappresent stream of photos associated a user.
      the photos in the stream are taken by followed users. The user
      can put like or comment on photos in the stream.
    
    parameters:
        - $ref: "#/components/parameters/Uid"

    get:
      tags:
        - photo
        - stream
      summary: list personal stream photos 
      description: >
        given *uid* of user that who wants to get all photo in his stream
      
      parameters:
        - $ref: "#/components/parameters/QueryLimit"
        - $ref: "#/components/parameters/UsernameFilter"
        
        - name: sortBy
          in: query
          required: false
          schema:
            description: >
              options for sorting photos
            type: string
            enum: ["dataUpdate", "size"]
          description: >
            ordering photo getted by value
       
        - name: reverse
          in: query
          required: false
          schema:
            description: >
              type value ordering flag
            type: boolean
            default: true
          description: >
            order photo in reverse order
        
      security:
        - BearerAuth: []
      operationId: getMyStream
      
      responses:
        "200":
          description: >
            success, getted stream photos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamPhotos"
        "404":
          description: >
            not found, user not found
        
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
            
        "204":
          description: >
            empty body, found nothing
        "500":
          $ref: "#/components/responses/ServerError"
    
  /users/{uid}/myStream/{photoId}:
  
    parameters:
        - $ref: "#/components/parameters/Uid"
        - $ref: "#/components/parameters/PhotoId"
    
    get:
      
      tags:
        - photo
        - stream
        - user
      
      security:
        - BearerAuth: []
      
      summary: get photo from stream
      description: >
        give *uid* and *photoId* and get photo associated
        
      operationId: getPhotoMyStream
      responses:
        "200":
          description: >
            success, getted desired photo from stream
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
          
        "404":
          description: >
            not found, user or photo not found
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        
        "204":
          description: >
            empty body, found nothing
        "500":
          $ref: "#/components/responses/ServerError"

  /users/{uid}/banned/:
    summary: banned users
    description: >
      this resource rappresent user banned by uid user
    
    parameters:
        - $ref: "#/components/parameters/Uid"
    
    get:
      security:
        - BearerAuth: []
        
      tags:
        - user
        - ban
      summary: users banned
      description: >
        given *uid* then list all user banned by user associated at *uid* 
    
      parameters:

        - $ref: "#/components/parameters/QueryLimit"
        - $ref: "#/components/parameters/UsernameFilter"
      
      operationId: listBannedUser
      
      responses:
        "200":
          description: >
            success, getted all user banned
          
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                minItems: 1
                maxItems: 100
                description: >
                  list  of banned users

        "404":
          description: >
            not found, user not found
        
        "204":
          description: >
            empty body, found nothing
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
  
  /users/{uid}/banned/{bannedId}:
    summary: users banned
    description: >
      this resource describe banned user
    
    parameters:
      - $ref: "#/components/parameters/Uid"
      - $ref: "#/components/parameters/BannedId"
    
    put:
      tags:
        - user
        - ban
      summary: ban user identificated by *uid* 
      description: >
        taken uid of the user who wants to ban and uid of the user to be banned, 
        bans the user(BannedID)

      requestBody:
        description: >
          information about user to ban
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
              
      security:
        - BearerAuth: []
      
      operationId: banUser
      
      responses:
        "201":
          description: >
            success, banned user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "204":
          description: >
            empty response, user just banned
        "404":
          description: >
            not found, user not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
    
    delete:
      tags:
        - user
        - ban
      summary: unban user
      description: >
        taken uid of the user who wants unbband id of user banned and delete last one
      security:
        - BearerAuth: []
        
      operationId: unbanUser
      
      responses:
        "204":
          description: >
            success, unbanned user
        "404":
          description: >
            not found, user not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
    
  
  /users/{uid}/myPhotos: 
    
    parameters:
      - $ref: "#/components/parameters/Uid"
    
    post:
      security:
        - BearerAuth: []
        
      tags:
        - photo
      summary: update photo
      description: >
        give photo and update it
        
      requestBody:
        description: >
          photo to update
        content:
          multipart/form-data:
            schema: 
              $ref: "#/components/schemas/Photo"
      
      operationId: uploadPhoto
      
      responses:
        "201":
          description: >
            success, update photo
          content:
            multipart/form-data:
              schema: 
                $ref: "#/components/schemas/Photo"
        "404":
          description: >
            user not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
    
    get:
      security:
        - BearerAuth: []
      tags:
        - photo
      summary: list stream photos updated
      description: >
        given *uid* get all photo has updated
      
      parameters:
        - $ref: "#/components/parameters/QueryLimit"
        - name: sortBy
          in: query
          required: false
          schema:
            description: >
              options for sorting photos
            type: string
            enum: ["dataUpdate", "size"]
          description: >
            ordering photo getted by value in enum
        - name: reverse
          in: query
          required: false
          schema:
            description: >
              flag for reverse sorting
            type: boolean
            default: true
          description: >
            order photo in reverse order
      
      operationId: listPhoto
      
      responses:
        "200":
          description: >
            success, stream photos updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamPhotos"
        
        "204":
          description: >
            empty body, found nothing
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
  
  /users/{uid}/myPhotos/{photoId}/: #
    summary: photo updated by user
    description: >
      this resource rappresent the streams of photos update by user in time
  
    parameters:
      - $ref: "#/components/parameters/Uid"
      - $ref: "#/components/parameters/PhotoId"
          
    delete:
      tags:
        - photo
      summary: delete photo updated
      description: >
        provide uid and photoID and delete the photo corresponding to photoID
    
      operationId: deletePhoto
      security:
        - BearerAuth: []
        
      responses:
        "204":
          description: >
            success, deleted photo
        "404":
          description: >
            not found, photo or user not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
    
    get:
      tags:
        - photo
      security:
        - BearerAuth: []
      summary: get photo
      description: >
        give *uid* and photo id and get photo with photo id gived
      operationId: getPhoto
      
      responses:
        "200": 
          description: >
            success, photo founded
          
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Photo"
          
        "404":
          description: >
            not found, photo or user not found
        
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        
        "204":
          description: >
            empty body, found nothing
        "500":
          $ref: "#/components/responses/ServerError"
  
  /users/{uid}/myPhotos/{photoId}/likes/:
    summary: likes on photo
    description: >
      This resource describes the likes received for the photo
    
    parameters:
        - $ref: "#/components/parameters/Uid"
        - $ref: "#/components/parameters/PhotoId"
    get:
      security:
        - BearerAuth: []
        
      tags:
        - photo
        - like
      summary: get likes collected by photo
      description: >
        give photo id and get all likes recived
      
      operationId: getLikes
      
      responses:
        "200":
          description: >
            success, getted likes
          content:
            application/json:
              schema:
                description: >
                  list of users that put like to the  photo
                type: array
                items:
                  $ref: "#/components/schemas/User"
                minItems: 1
                maxItems: 1000
        "404":
          description: >
            not found, user or photo not found
        
        "204":
          description: >
            empty body, found nothing
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
  
  /users/{uid}/myPhotos/{photoId}/likes/{likeUserId}:
    
    parameters:
        - $ref: "#/components/parameters/Uid"
        - $ref: "#/components/parameters/PhotoId"
        - $ref: "#/components/parameters/LikeId"
    put:
      
      tags:
        - photo
        - like
      summary: put like a photo
      description: >
        provide photo id and owner id. 
        The like is identified by the *uid* of the user who likes it.
      
      requestBody:
        description: >
          information about user that put like
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      
      operationId: likePhoto
      
      security:
        - BearerAuth: []
      responses:
        "201":  
          description: >
            success, like added to the photo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "204": 
          description: >
            not content, just liked this photo
        "404":
          description: >
            not found, user or photo not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
      
    delete:
      tags:
        - photo
        - like
      summary: remove like a photo
      description: >
        provide photo id and owner id
        and remove like given user identificated by
        *likeUserId*
        
      operationId: unlikePhoto
      security:
        - BearerAuth: []
      responses:
        "204":  
          description: >
            success, unliked the photo
        "404":
          description: >
            not found, user or photo not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
      
    
  /users/{uid}/myPhotos/{photoId}/comments/:
    
    parameters:
      - $ref: "#/components/parameters/Uid"
      - $ref: "#/components/parameters/PhotoId"
    
    post:
      tags:
        - comment
        - photo
      summary: add comment a photo
      description: >
        give user id and photo id if user is owner of photo add a comment
        stored in the body of request
      
      
      
      requestBody:
        description: > 
          comment to add
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/Comment"
      
      security:
        - BearerAuth: []
      operationId: commentPhoto
      
      responses:
        "201":
          description: >
            success, new comment added to photo
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Comment"
          
        "404":
          description: >
            not found, photo or user not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
    
    get:
      security:
        - BearerAuth: []
        
      tags:
        - photo
        - comment
      summary: get comments on photo
      description: >
        give photo id and user id of owner photo then get all comments on photo
      
      parameters:
        - $ref: "#/components/parameters/QueryLimit"
        - $ref: "#/components/parameters/UsernameFilter"
        - name: sortByData
          in: query
          required: false
          schema:
            description: >
              flag for sorting comments on photo by update data
            type: boolean
            default: true
          description: >
            sort comments by data creation
        
      
      operationId: getComments
      responses:
        "200":
          description: >
            success, get all comments on photo
          
          content:
            application/json:
              schema:
                description: >
                  list of comments on photo
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
                minItems: 1
                maxItems: 500

        "404":
          description: >
            not found, user not found
        "204":
          description: >
            empty body, found nothing
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
  
  /users/{uid}/myPhotos/{photoId}/comments/{commentId}:
    summary: comment on photo
    description: >
      this resource rappresent a single comment on photo
    
    parameters:
      - $ref: "#/components/parameters/Uid"
      - $ref: "#/components/parameters/PhotoId"
      - $ref: "#/components/parameters/CommentId"
    delete:
      tags:
        - comment
        - photo
      summary: delete comment on photo
      description: >
        give user id of owner photo, photo id and remove comment on photo identified from comment id given
      
      security:
        - BearerAuth: []
        
      operationId: uncommentPhoto
      responses:
        "204":
          description: >
            success, deleted comment
        "404":
          description: >
            not found, photo or user not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        "500":
          $ref: "#/components/responses/ServerError"
    
    get:
      tags:
        - comment
        - photo
      
      security:
        - BearerAuth: []
      
      summary: get comment on photo
      description: >
        give user id photo owner, photo id and id of comment on photo and get it
      
      operationId: getComment
      
      responses:
        "200":
          description: >
            get comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: >
            user or comment not found
        
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        
        "403":
          $ref: "#/components/responses/UnauthorizedToken"
        
        "204":
          description: >
            empty body, found nothing
        "500":
          $ref: "#/components/responses/ServerError"
  
  /session:
    post:
      tags: 
        - login
      summary: Logs in the user
      description: >
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      
      operationId: doLogin
     
      requestBody:
        description: >
          User details
        content:
          application/json:
            schema:
              description: >
                username
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/Username"
        required: true
      responses:
        "201":
          description: >
            User log-in action successful
          content:
            application/json:
              schema:
                description: >
                  id and username of user logged
                type: object
                properties:
                  identifier:
                    $ref: "#/components/schemas/Id"
                  username:
                
                    $ref: "#/components/schemas/Username"
        "500":
          $ref: "#/components/responses/ServerError"
        
components:

  parameters:
    
    QueryLimit:
      description: >
        security parameter to limit the number of items in a response and avoid DOS attacks
      name: limit
      in: query
      required: false
      schema:
        description: >
          format limit values
        type: integer
        format: int
        minimum: 1
        example: 50
    
    UsernameFilter:
      description: >
        parameter use to filter set of users by his username
      name: username
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/Username"
    
    Uid:
      name: uid
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Id"
      description: >
        user id
    
    PhotoId:
      name: photoId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Id"
      description: >
        photo id
    
    CommentId:
      name: commentId
      in: path
      required: true
      description: >
        comment id
      schema:
        $ref: "#/components/schemas/Id"
    
    LikeId:
      name: likeUserId
      in: path
      required: true
      description: >
        uid user put like
      schema:
        $ref: "#/components/schemas/Id"
    
    FollowerId:
      name: followerId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Id"
      description: >
        user to unfollow
    
    FollowingId:
      name: followingId
      required: true
      in: path
      description: >
        user id to following
      schema:
        $ref: "#/components/schemas/Id"
    
    BannedId:
      name: bannedId
      in: path
      required: true
      description: >
        uid user to ban
      schema:
        $ref: "#/components/schemas/Id"
    
    
    
    
  responses:
    UnauthorizedError:
      description: >
        Access token is missing or invalid 

    UnauthorizedToken:
      description: >
        the submitted token does not have the necessary permissions to access this resource
    
    ServerError:
      description: >
        server internal error, for more information see log file

  securitySchemes:
    
    BearerAuth:
      description: >
        basic safety mechanism based on "bearer" mechanism. APIs that require a minimum level of security can adopt this method
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  schemas:
    User:
      description: >
        this object rappresent a user
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/Id"
        username: 
          $ref: "#/components/schemas/Username"
      required:
        - uid
        - username
      
    
    Username:
      description: >
        username of a user
      type: string
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16
      example: "marioross"
    
    Id:
      description: >
        Identificator at 64-bit
      type: integer
      format: int64 
      readOnly: true
      example: 4570 
    
    Profile:
      description: >
        user profile rappresentation
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        stream:
          $ref: "#/components/schemas/StreamPhotos"
        follower:
          type: integer
          minimum: 0
          description: >
            number user that follow a specific user
          example: 12
        following:
          type: integer
          minimum: 0
          description: >
            numer of users following by specific user
          example: 70
        
    
    Photo:
      description: >
        this object rappresent a photo
      type: object
      properties:
        photoId:
          $ref: "#/components/schemas/Id"
        timeUpdate:
          $ref: "#/components/schemas/TimeStamp"

        imageData:
          description: >
            data
          type: string
          format: binary
          minLength: 0
          maxLength: 5000000
          

        
        descriptionImg:
          description: >
            image description
          type: string
          example: "a good photo!"
          minLength: 1
          maxLength: 250
          pattern: "^.*?$"
      required:
        - imageData
        - timeUpdate
          
    
    StreamPhotos:
      description: >
        model of stream of photos
      type: array
      items:
        $ref: "#/components/schemas/Photo"
      minItems: 0
      maxItems: 100
      
    
    TimeStamp:
      description: >
        this components describe timestamp value
        conform to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) specification
      type: string
      format: data-time
      pattern: '^[1-9]\d{3}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$'
      example: "2017-07-21T17:32:28Z"
      minLength: 20
      maxLength: 21
      readOnly: true
    
    Comment:
      description: > 
        this object rappresent a comment on a photo.
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        commentId:
          $ref: "#/components/schemas/Id"
        text:
          description: >
            comment text encoded in UNICODE format
          type: string
          minLength: 1
          maxLength: 250
          pattern: "^.*$"
          example: 
            "😀 i like you photo! 😀"
        timeStamp:
          $ref: "#/components/schemas/TimeStamp"
      required:
        - user
        - text
        - timeStamp
        - commentId

tags:
  - name: user
    description: >
      manage users account and use
      social functionality
  - name: photo
    description: >
      functionality on photo. Manage photo stream
      and put comments and like to photo
  - name: stream
    description: >
      Manage streams of photos
  - name: follower
    description: >
      Manage user followers 
  - name: like
    description: >
      Manage likes putted to the photos
  - name: ban
    description: >
      Manage system blocking of users
  - name: comment
    description: >
      Manage comments gived to photos
  - name: following
    description: >
      Manage user that followings
  - name: login
    description: >
      log-in function for users
