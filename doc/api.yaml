openapi: 3.0.1
info:
  title: WASAPhoto APIs
  version: 1.0.0
  description: |
    **"Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto!"**
    
    WASAPhoto is web application based on RESTfull architecture to allows upload your photos directly from your PC, and they will be visible to everyone following you.
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  
  contact:
    name: Andrea Pizzi
    url: https://github.com/pizzi-andrea/WASAPhoto
    email: pizzi.1995517@studenti.uniroma1.it
  
servers:
  - url: https//localhost:8080

components:
  schemas:
    User:
      description: |
        this object rappresent a user
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/Id"
        username: 
          $ref: "#/components/schemas/Username"
      

      required:
        - uid
        - username
      
    
    Username:
      description: username of a user
      type: string
      pattern: 'Ë†.*?$'
      minLength: 3
      maxLength: 16
      example: marioross
    
    Id:
      description: Identificator at 64-bit
      type: integer
      format: int64 
      readOnly: true
      example: 4570 
    
    Profile:
      description: user profile rappresentation
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        stream:
          $ref: "#/components/schemas/StreamPhotos"
        follower:
          type: integer
          minimum: 0
          description: number user that follow a specific user
          example: 12
        following:
          type: integer
          minimum: 0
          description: numer of users following by specific user
          example: 70
        
    
    Photo:
      description: >
        this object rappresent a photo
      type: object
      properties:
        photoId:
          $ref: "#/components/schemas/Id"
        timeUpdate:
          type: string
          format: data-time
          description: >
            time update photo
          example: 2017-07-21T17:32:28Z
          readOnly: true

        imageData:
          description: data
          type: string
          format: binary
        
        descriptionImg:
          description: image description
          type: string
          format: byte
          example: a good photo
    
    StreamPhotos:
      description: model of stream of photos
      type: array
      items:
        $ref: "#/components/schemas/Photo"
    
    Comment:
      description: > 
        this object rappresent a comment on a photo.
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
  
        text:
          type: string
          format: byte
          minLength: 1
          maxLength: 250
          example: 
            i like you photo!
        timeStamp:
          type: string
          format: data-time
          example: 2017-07-21T17:32:28Z
          readOnly: true
      required:
        - user
        - text
        - timeStamp

paths:
  /users/:
    summary: users
    description: >
      this resource rappresent collection of users
    
    post:
      summary: add new user
      description: >
        create new user registred in login phase
      
      tags:
        - user
      requestBody:
        description: user to register
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      operationId: addNewUser
      
      responses:
        "201":
          description: successfull create new user

    get:
      tags:
        - user
      summary: list registred users
      description: >
        this method return the list of users currently registered
      parameters: 
        - name: limit
          description: limit elements to return
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: username
          description: list user respect the username
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Username"
          
          
      operationId: listUsers
      
      responses:
        "200":
          description: >
            get the list contaning all users current signed
          content:
            application/json:
              schema:
                type: array
                items: {$ref: "#/components/schemas/User"}
                example:
                  - username: MarioRoss
                    uid: 10
                  - username: alux
                    uid: 840
    
  /users/{uid}/:
    summary:  users
    description: >
      this resource rappresent a single user
    
    get:
      tags:
        - user
      summary: get specific user profile
      description: >
        give user id and put user profile. User profile is object contain 
        all information on user, in particular:
          - information about user
          - stream photos updated
          - number of photo have been updated
          - number of followers
          - number of following
      
      parameters:
        - in: path
          name: uid
          schema:
            $ref: "#/components/schemas/Id"
          required: true
          description: Numeric ID of the user to get
        
      operationId: getUserProfile
      
      responses:
        "200":
          description: get user profile corresponding to *uid*
          content:
            application/json:
              schema:
                {$ref: "#/components/schemas/Profile"}
        "404":
          description: user not found
    
    put:
      tags:
        - user
      summary: assign or update username
      description: >
        assign username or update old username with new username.
        The username to set is in the body request
      
      parameters:
        - name: uid
          in: path
          description: user id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        description: new username
        required: true
      
      operationId: setMyUserName
      
      responses:
        "204":
          description: >
            success, assigned new username
        "403":
          description: >
            operation not authorizated for this user
            
          

  
  /users/{uid}/followers/:
    summary: user followers
    description: >
      this resurce rappresent the followers of specific user
    
    get:
      tags:
        - user
        - follower
      summary: get all followers
      description: >
        give a UID return a list contanings all followers user
      
      operationId: listFollowers
      
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          description: user id
        
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: maximum number of elements to include in response
        
        - name: username
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Username"
          description: search followers by their username
          
      
      responses:
        "200":
          description: return list of followers
          content:
            application/json:
              schema:
                type: array
                items: {$ref: "#/components/schemas/User"}
        "404":
          description: user not found

  
  
  /users/{uid}/followers/{followerId}:
    summary: a follower
    description: this resource rappresent follower
    
    delete:
      tags:
        - user
        - follower
      summary: unfollow user
      description:
        gived uid and followedID then remove follower{followerID} from user followers
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          description: user wuold remove follow
          
        - name: followerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          description: user to unfollow
      
      operationId: unfollowUser
      
      responses:
        "200":
          description: success , now unfollow the user
        "404":
          description: just no follow user or user Id not exist
        "403":
          description: user not authorizated
    
    put:
      tags:
        - user
        - follower
      summary:  follow user
      description: >
        give user  and added to  follower of user
      
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          description: user id 
        
        - name: followerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          description: user id of follower
      
      requestBody:
        description: information on followers
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      
      operationId: followUser
      
      responses:
        "201": 
          description: added new follower
        "204":
          description: just follow the user
  
  /users/{uid}/following/:
    summary: users following by specific user
    description: > 
      this resource rappresent all users following by user
    
    get:
      tags:
        - photo
      summary: get following users
      description: >
        give user id and get all user that following the user
      
      parameters:
        - name: uid
          in: path
          required: true
          description: user id
          schema:
            $ref: "#/components/schemas/Id"
        - name: username
          in: query
          required: false
          description: username to find
          schema:
            $ref: "#/components/schemas/Username"
        - name: limit
          in: query
          required: false
          description: maximum number of elements to include in response
          schema:
            type: integer
            minimum: 1
            example: 3
      
      operationId: getFollowings
      
      responses:
        "200":
          description: success, get users following
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: user not found
  
  /users/{uid}/following/{followingId}:
    summary: user following this user
    description: >
      this resource rappresent following user
    
    put:
      tags:
        - following
        - user
      summary: add new following
      description: >
        give uid user and uid of following user
      
      parameters:
        - name: uid
          in: path
          required: true
          description: user id to follow
          schema:
            $ref: "#/components/schemas/Id"
        - name: followingId
          required: true
          in: path
          description: user id to following
          schema:
            $ref: "#/components/schemas/Id"
      
      requestBody:
        description: informations about user to following
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      
      operationId: following
      
      responses:
        "201":
          description: success, added new following
        "204":
          description: just following the user
        "404":
          description: user not found
    
    delete:
      tags: 
        - following
        - user
      summary: delete following
      description: >
        give user id and  user following id and stop following him
      
      parameters:
        - name: uid
          in: path
          required: true
          description: user id to follow
          schema:
            $ref: "#/components/schemas/Id"
        - name: followingId
          required: true
          in: path
          description: user id to following
          schema:
            $ref: "#/components/schemas/Id"
      
      operationId: unfollowing

      responses:
        "200":
          description: success, unFollowing the users
        "404":
          description: user not found
    
    
  /users/{uid}/myStream:
    summary: user stream photos
    description: >
      this resource rappresent stream of photos associated a user.
      the photos in the stream are taken by followed users. The user
      can put like or comment on photos in the stream
    
    parameters:
        - name: uid
          in: path
          description: user id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
    
    post:
      tags:
        - photo
        - user
      summary: add photo to the stream
      description: >
        give photo in body request and update it in personal user stream
      
      operationId: addPhotoMyStream
      
      requestBody:
        description: photo to update
        content:
          application/json:
            schema: {$ref: "#/components/schemas/Photo"}
      
      responses:
        "201":
          description: >
            success, photo updated
        "404":
          description: >
            user not found
        "403":
          description: >
            operation not permitted
      
    get:
      tags:
        - photo
        - stream
      summary: list personal stream photos 
      description: >
        give uid get all photo in his stream
      
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: maximum number of elements to include in response
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: ["dataUpdate", "size"]
          description: ordering photo getted by value
        - name: reverse
          in: query
          required: false
          schema:
            type: boolean
          description: order photo in reverse order
        - name: username
          in: query
          required: false
          description: filter photos of stream by username 
          schema:
            $ref: "#/components/schemas/Username"
          
      operationId: getMyStream
      
      responses:
        "200":
          description: >
            getted stream photos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamPhotos"
        "404":
          description: >
            user not found
        
        "403":
          description: >
            operation not permitted
    
            
        
  /users/{uid}/myStream/{photoId}:
  
    parameters:
        - name: uid
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          description: user id
        - name: photoId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          description: photo id
    
    get:
      tags:
        - photo
        - stream
        - user
      summary: get photo from stream
      description: >
        give *uid* and *photoId* and get photo associated
    
      operationId: getPhotoMyStream
      responses:
        "200":
          description: >
            success, getted desired photo from stream
        "404":
          description: >
            user or photo not found
        "403":
          description: >
            operation not permitted, user not authorizated to get photos from this stream
    
    delete:
      tags:
        - photo
        - stream
        - user
      summary: delete photo from stream
      description: >
        give *uid* and *photoId* and deleted photo associated
    
      operationId: deletePhotoMyStream
      responses:
        "201":
          description: >
            success, removed desired photo from stream
        "404":
          description: >
            user or photo not found
        "403":
          description: >
            operation not permitted, user not authorizated to delete photos from this stream
          
      
    
  /users/{uid}/banned/:
    summary: banned user
    description: this resource rappresent user banned by uid user
    
    get:
      tags:
        - user
        - ban
      summary: users banned
      description: >
        list all user banned by user 
      
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          description: user id
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: maximum number of elements to include in response
        - name: username
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Username"
          description: find users banned by username
      
      operationId: listBannedUser
      
      responses:
        "200":
          description: >
            list all user banned
          
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: >
            user not found
  
  /users/{uid}/banned/{bannedId}:
    summary: users banned
    description: >
      this resource describe banned user
    
    put:
      tags:
        - user
        - ban
      summary: ban user identificated by *uid* 
      description: >
        taken uid of the user who wants to ban and uid of the user to be banned, 
        bans the user(BannedID)
      
      parameters:
        - name: uid
          in: path
          required: true
          description: uid who wonts ban
          schema:
            $ref: "#/components/schemas/Id"
        - name: bannedId
          in: path
          required: true
          description: uid user to ban
          schema:
            $ref: "#/components/schemas/Id"
      
      operationId: banUser
      
      responses:
        "201":
          description: successfull banned user
        "204":
          description: user just banned
        "404":
          description: user not found
    
    delete:
      tags:
        - user
        - ban
      summary: unban user
      description: >
        taken uid of the user who wants unbband id of user banned and delete last one
      
      parameters:
        - name: uid
          in: path
          required: true
          description: uid who wonts unban
          schema:
            $ref: "#/components/schemas/Id"
        - name: bannedId
          in: path
          required: true
          description: uid user to unbanned
          schema:
            $ref: "#/components/schemas/Id"
      
      operationId: unbanUser
      
      responses:
        "200":
          description: successfull unbanned user
        "404":
          description: user not found
        "403":
          description: user not authorizated
    
  
  /users/{uid}/myPhotos: 
    
    parameters:
      - name: uid
        in: path
        required: true
        description: user id
        schema:
          $ref: "#/components/schemas/Id"
    
    post:
      tags:
        - photo
      summary: update photo
      description: >
        give photo and update it
        
      requestBody:
        description: photo to update
        content:
          application/json:
            schema: {$ref: "#/components/schemas/Photo"}
      
      operationId: uploadPhoto
      
      responses:
        "201":
          description: >
            success, update photo
        "404":
          description: >
            user not found
    
    get:
      tags:
        - photo
      summary: list stream photos updated
      description: >
        give *uid* get all photo has updated
      
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: maximum number of elements to include in response
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: ["dataUpdate", "size"]
          description: ordering photo getted by value
        - name: reverse
          in: query
          required: false
          schema:
            type: boolean
          description: order photo in reverse order
      
      operationId: listPhoto
      
      responses:
        "200":
          description: >
            list photo updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamPhotos"
        "403": 
          description: >
            operation not permitted, user actor banned or not following this user
          
          
  
  /users/{uid}/myPhotos/{photoId}/: #
    summary: photo updated by user
    description: >
      this resource rappresent the streams of photos update by user in time
    
    delete:
      tags:
        - photo
      summary: delete photo updated
      description: >
        provide uid and photoID and delete the photo corresponding to photoID
      
      parameters:
        - name: uid
          in: path
          description: user id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        - name: photoId
          in: path
          description: photo id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      
      operationId: deletePhoto
        
      responses:
        "200":
          description: >
            success, deleted photo
        "404":
          description: >
            photo or user not found
        "403":
          description: >
            operation not authorized
    
    get:
      tags:
        - photo
      summary: get photo
      description: give *uid* and photo id and get photo with photo id gived
      
      parameters:
        - name: uid
          in: path
          description: user id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        - name: photoId
          in: path
          description: photo id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      
      operationId: getPhoto
      
      responses:
        "200": 
          description: >
            photo founded
          
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Photo"}
          
        "404":
          description: >
            photo or user not found
  
  /users/{uid}/myPhotos/{photoId}/likes/: #
    summary: likes on photo
    description: >
      This resource describes the likes received for the photo
    
    get:
      tags:
        - photo
        - like
      summary: get likes collected by photo
      description: give photo id and get all likes recived
      
      parameters:
        - name: uid
          in: path
          description: user id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        - name: photoId
          in: path
          description: photo id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      
      operationId: getLikes
      
      responses:
        "200":
          description: >
            success, getted likes
          
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Id"
                description: user id that put like
        "404":
          description: >
            user or photo not found
  
  /users/{uid}/myPhotos/{photoId}/likes/{likeUserId}:
    put:
      tags:
        - photo
        - like
      summary: put like a photo
      description: >
        provide photo id and owner id. 
        The like is identified by the *uid* of the user who likes it.
      
      parameters:
        - name: uid
          in: path
          description: user id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        
        - name: photoId
          in: path
          description: photo id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        
        - name: likeUserId
          in: path
          required: true
          description: uid user put like
          schema:
            $ref: "#/components/schemas/Id"
      
      operationId: likePhoto
      
      responses:
        "201":  
          description: >
            successfully liked the photo
        "204": 
          description: >
            just liked this photo
        "404":
          description: >
            user or photo not found
        "403":
          description: >
            operation not authorized
      
    delete:
      tags:
        - photo
        - like
      summary: remove like a photo
      description: >
        provide photo id and owner id
        and remove like given user identificated by
        likeUserId
        
      parameters:
        - name: uid
          in: path
          description: user id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          example: 999
        
        - name: photoId
          in: path
          description: photo id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          example: 10
        
        - name: likeUserId
          in: path
          required: true
          description: uid user wont remove like
          schema:
            $ref: "#/components/schemas/Id"
          example: 7
        
      operationId: unlikePhoto
      
      responses:
        "200":  
          description: >
            successfully unliked the photo
        "404":
          description: >
            like, user or photo not found
        "403":
          description: >
            operation not authorized, you not owner this like
      
    
  /users/{uid}/myPhotos/{photoId}/comments/:
    post:
      tags:
        - comment
        - photo
      summary: add comment a photo
      description: >
        give user id and photo id if user is owner of photo add a comment
        stored in the body of request
      
      parameters:
        - name: uid
          in: path
          required: true
          description: user id
          schema:
            $ref: "#/components/schemas/Id"
        - name: photoId
          in: path
          required: true
          description: photo id
          schema:
            $ref: "#/components/schemas/Id"
      
      requestBody:
        description: > 
          comment to add
        content:
          application/json:
            schema: {$ref: "#/components/schemas/Comment"}
      
      operationId: commentPhoto
      
      responses:
        "201":
          description: success, new comment added to photo
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Comment"}
          
        "404":
          description: photo or user not found
    
    get:
      tags:
        - photo
        - comment
      summary: get comments on photo
      description: >
        give photo id and user id of owner photo then get all comments on photo
      
      parameters:
        - name: uid
          in: path
          required: true
          description: user id
          schema:
            $ref: "#/components/schemas/Id"
        - name: photoId
          in: path
          required: true
          description: photo id
          schema:
            $ref: "#/components/schemas/Id"
        - name: limit
          in: query
          required: false
          description: maximum number of elements to include in response
          schema:
            type: integer
            minimum: 1
        - name: sortByData
          in: query
          required: false
          schema:
            type: boolean
          description: sort comments by data creation
        - name: username
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Username"
          description: get comment give by particular username
    
      responses:
        "200":
          description: success, get all comments on photo
          
          content:
            application/json:
              schema: 
                type: array
                items:
                  {$ref: "#/components/schemas/Comment"}
  
  /users/{uid}/myPhotos/{photoId}/comments/{commentId}:
    summary: comment on photo
    description: >
      this resource rappresent a single comment on photo
    delete:
      tags:
        - comment
        - photo
      summary: delete comment on photo
      description: >
        give user id of owner photo, photo id and remove comment on photo identified from comment id given
      
      parameters:
        - name: uid
          in: path
          required: true
          description: user id
          schema:
            $ref: "#/components/schemas/Id"
        - name: photoId
          in: path
          required: true
          description: photo id
          schema:
            $ref: "#/components/schemas/Id"
        - name: commentId
          in: path
          required: true
          description: comment id
          schema:
            $ref: "#/components/schemas/Id"
      
      operationId: uncommentPhoto
      
      responses:
        "201":
          description: >
            successfull deleted comment
        "404":
          description: >
            photo or user not found
        "403":
          description: >
            operation not authorized, you not owner this like
    
    get:
      tags:
        - comment
        - photo
      summary: get comment on photo
      description: >
        give user id photo owner, photo id and id of comment on photo and get it
      
      parameters:
        - name: uid
          in: path
          required: true
          description: user id
          schema:
            $ref: "#/components/schemas/Id"
        - name: photoId
          in: path
          required: true
          description: photo id
          schema:
            $ref: "#/components/schemas/Id"
        - name: commentId
          in: path
          required: true
          description: comment id
          schema:
            {$ref: "#/components/schemas/Comment"}
      
      operationId: getComment
      
      responses:
        "200":
          description: >
            get comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: >
            user or comment not found
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      
      operationId: doLogin
     
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    $ref: "#/components/schemas/Id"
                  username:
                    $ref: "#/components/schemas/Username"
